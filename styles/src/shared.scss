@import "./palette";

@font-face {
  font-family: "Lato-Black";
  font-weight: 900;
  src: url(../../fonts/Lato-Black.ttf);
}
@font-face {
  font-family: "Lato-Bold";
  font-weight: 700;
  src: url(../../fonts/Lato-Bold.ttf);
}
@font-face {
  font-family: "Lato-Regular";
  font-weight: 400;
  src: url(../../fonts/Lato-Regular.ttf);
}
@font-face {
  font-family: "Lato-Light";
  font-weight: 300;
  src: url(../../fonts/Lato-Light.ttf);
}

/* line-heights */

$line-heights-list: 19, 20, 21, 24, 27, 30, 36, 40;

@for $i from 1 through length($line-heights-list) {
  .line-height-#{nth($line-heights-list, $i)} {
    line-height: nth($line-heights-list, $i) + px;
  }
}

// font-sizes

$font-sizes-list: 14, 15, 16, 18, 24, 30, 36, 48, 60;

@each $item in $font-sizes-list {
  .font-#{$item} {
    font-size: $item + px;
  }
}

// colors

.background-gradient {
  background: linear-gradient(45deg, #1dd1ad, #45d0ff);
}

@each $color-class, $color in $colors {
  .#{$color-class} {
    color: $color;
  }
}

@each $background-class, $color in $background-colors {
  .#{$background-class} {
    background-color: $color;
  }
}

//  font-family
$font-family: (
  lato-bold: Lato-Bold,
  lato-light: Lato-Light,
  lato-regular: Lato-Regular,
  lato-black: Lato-Black,
);

@each $class-name, $font-family-value in $font-family {
  .#{$class-name} {
    font-family: $font-family-value;
  }
}

// positioning

@mixin position($x: 50%, $y: 50%) {
  position: absolute;
  top: $x;
  left: $y;
}

// thid component grid heights

@function container($size) {
  @if $size == large {
    @return 400px;
  } @else if $size == medium {
    @return 800px;
  } @else {
    @return 543px;
  }
}

// 15th component grid width calculation formula

$one-column: 85px;
$gap-column: 10px;

@function container-column($num: 1) {
  @if $num > 1 {
    @return $num * $one-column + $gap-column * ($num - 1);
  } @else {
    @return $one-column;
  }
}

// common form classes

.checkmark-before {
  content: "";
  background-color: $main-green-color;
  border-radius: 50%;
  width: 7px;
  height: 7px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  position: absolute;
  display: none;
  transition-duration: 0.2s;
}

.checkmark {
  position: absolute;
  top: 0;
  left: 0;
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background-color: $color-white;
  cursor: pointer;
}
.radio-input {
  position: absolute;
  opacity: 0;
  cursor: pointer;
}
.form-label {
  position: relative;
  display: inline-block;
  width: 14px;
}

//  buttons

button {
  transition: all 0.2s ease-out;
  cursor: pointer;
  outline: none;
  border: none;
  text-decoration: none;
}

.button-1,
.button-2 {
  position: relative;
  transition: 0.3s;
  overflow: hidden;
}
.button-1::before,
.button-2::before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
  content: "";
  transition: transform 0.3s;
  overflow: hidden;
  right: auto;
  bottom: auto;
  width: 120%;
  height: 100%;
  transform-origin: right top;
  transform: skewX(-30deg) scale(0, 1);
}
.button-1:hover,
.button-2:hover {
  color: #fff;
}
.button-1:hover::before {
  background-color: $main-green-color;
  z-index: 1;
}
.button-2:hover::before {
  background-color: #3a3e4a;
  z-index: 1;
}
.button-1:hover,
.button-2:hover {
  background: transparent;
}

.button-1:hover::before,
.button-2:hover::before {
  transform-origin: left top;
  transform: skewX(-30deg) scale(1, 1);
}
.button-1 span,
.button-2 span {
  z-index: 1;
  position: relative;
}

// shared classes

.flex {
  display: flex;
}
.flex-centering {
  display: flex;
  justify-content: center;
  align-items: center;
}
.space-between {
  justify-content: space-between;
}
.flex-column {
  flex-direction: column;
}

.center {
  margin: 0 auto;
}

.position-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.transition {
  transition: all 0.2s ease-out;
}
